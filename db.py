# -*- coding: utf-8 -*-
"""
ЁЯТ░ EARNING MASTER BOT - Professional Notification System
ЁЯФФ Version: 4.0 | Codename: "Active Earner"
"""

import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from typing import List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

# Configuration
BOT_TOKEN = "7641873839:AAHt4JsRYUMQDHrrEHdOB-No3ZrtJQeDxXc"
TIMEZONE = pytz.timezone("Asia/Dhaka")
NOTIFICATION_INTERVAL_MINUTES = 60  # 1 hour interval

class NotificationSystem:
    def __init__(self):
        self.db = sqlite3.connect('earning_master.db')
        self.scheduler = AsyncIOScheduler(timezone=TIMEZONE)
        self.setup_scheduler()
        
    def setup_scheduler(self):
        """рж╢рж┐ржбрж┐ржЙрж▓рж╛рж░ рж╕рзЗржЯржЖржк ржХрж░рзБржи"""
        self.scheduler.add_job(
            self.send_hourly_notifications,
            'interval',
            minutes=NOTIFICATION_INTERVAL_MINUTES,
            next_run_time=datetime.now(TIMEZONE) + timedelta(minutes=1)
        )
    
    async def send_hourly_notifications(self):
        """рж╕ржХрж▓ ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржи"""
        cursor = self.db.cursor()
        cursor.execute("SELECT user_id FROM users WHERE has_joined_channel = TRUE")
        active_users = cursor.fetchall()
        
        for user in active_users:
            user_id = user[0]
            try:
                await self.send_notification(user_id)
            except Exception as e:
                logging.error(f"Failed to send notification to {user_id}: {str(e)}")
    
    async def send_notification(self, user_id: int):
        """ржЗржЙржЬрж╛рж░ржХрзЗ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржи"""
        notification_text = (
            "ЁЯМЯ <b>ржЖржкржирж╛рж░ ржЖржпрж╝рзЗрж░ рж╕рзБржпрзЛржЧ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ!</b> ЁЯМЯ\n\n"
            "ЁЯХТ ржПржЯрж┐ ржЖржкржирж╛рж░ ржШржирзНржЯрж╛рж░ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░:\n"
            "тЬЕ ржПржЦржиржЗ ржХрж┐ржЫрзБ ржХрж╛ржЬ ржХрж░рзБржи ржПржмржВ ржЕрж░рзНрже ржЙржкрж╛рж░рзНржЬржи ржХрж░рзБржи!\n\n"
            "ЁЯУК ржЖржкржирж╛рж░ ржЖржЬржХрзЗрж░ ржЖржпрж╝ ржмрж╛ржбрж╝рж╛ржирзЛрж░ ржЬржирзНржп:\n"
            "тЦля╕П ржмрж┐ржЬрзНржЮрж╛ржкржи ржжрзЗржЦрзБржи\n"
            "тЦля╕П рж░рзЗржлрж╛рж░ ржХрж░рзБржи\n"
            "тЦля╕П рж╕рж╛рж░рзНржнрзЗ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржи\n\n"
            "ЁЯТ░ <i>ржкрзНрж░рждрж┐ржЯрж┐ ржШржирзНржЯрж╛ржпрж╝ ржирждрзБржи рж╕рзБржпрзЛржЧ ржЖрж╕рзЗ!</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("ЁЯТ░ ржПржЦржиржЗ ржЖржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржи", callback_data="earn_now")],
            [InlineKeyboardButton("тП░ ржкрж░рзЗ ржоржирзЗ ржХрж░рж┐ржпрж╝рзЗ ржжрж┐ржи", callback_data="remind_later")]
        ]
        
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

class EarningMasterBot:
    def __init__(self):
        self.notification = NotificationSystem()
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """ржмржЯрзЗрж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕рзЗржЯржЖржк ржХрж░рзБржи"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """рж╕рзНржЯрж╛рж░рзНржЯ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░"""
        user = update.effective_user
        welcome_msg = (
            f"ЁЯСЛ <b>рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!</b>\n\n"
            "ржЖржкржирж┐ ржПржЦржи рзз ржШржирзНржЯрж╛ ржкрж░ржкрж░ ржЖржпрж╝рзЗрж░ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржкрж╛ржмрзЗржиред\n"
            "ржирж┐ржпрж╝ржорж┐ржд ржХрж╛ржЬ ржХрж░рзЗ ржмрзЗрж╢рж┐ ржЖржпрж╝ ржХрж░рзБржи!"
        )
        
        await update.message.reply_text(
            welcome_msg,
            parse_mode='HTML'
        )
        
        # ржкрзНрж░ржержо ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╢рж┐ржбрж┐ржЙрж▓ ржХрж░рзБржи
        asyncio.create_task(self.notification.send_notification(user.id))
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "earn_now":
            await query.edit_message_text("ЁЯОЙ ржЪрж▓рзБржи ржПржЦржиржЗ ржЖржпрж╝ рж╢рзБрж░рзБ ржХрж░рж┐!")
        elif query.data == "remind_later":
            await query.edit_message_text("ЁЯСН ржарж┐ржХ ржЖржЫрзЗ, ржЖржорж┐ рзз ржШржирзНржЯрж╛ ржкрж░рзЗ ржЖржмрж╛рж░ ржоржирзЗ ржХрж░рж┐ржпрж╝рзЗ ржжрзЗржм!")

def main():
    """ржкрзНрж░ржзрж╛ржи ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржПржирзНржЯрзНрж░рж┐ ржкржпрж╝рзЗржирзНржЯ"""
    bot = EarningMasterBot()
    bot.notification.scheduler.start()
    bot.application.run_polling()

if __name__ == "__main__":
    # рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # ржбрж╛ржЯрж╛ржмрзЗрж╕ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐
    conn = sqlite3.connect('earning_master.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        has_joined_channel BOOLEAN DEFAULT TRUE
    )
    ''')
    conn.commit()
    conn.close()
    
    main()
